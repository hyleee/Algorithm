package 병사관리;

//author: 류호석(rhs0266)

class UserSolution
{
 public class Node {
     int id;  // 고유 번호
     int v; // 버전 번호 
     Node nxt; // 다음 노드를 가르키는 포인터 

     Node() {}

     Node(int id, int v) {
         this.id = id;
         this.v = v;
         this.nxt = null;
     }

     Node(int id, int v, Node nxt) {
         this.id = id;
         this.v = v;
         this.nxt = nxt;
     }
 }

 public Node[] node = new Node[200055]; // 병사 노드 배열 ( 최대 200055명 병사)
 public int cnt = 0; // 노드 배열의 인덱스 관리
 public int[] version = new int[100055];  // version[i] := ID 가 i 인 사람의 최신 버전
 public int[] num = new int[100055];      // num[i] := ID 가 i 인 사람의 team 번호

 public Node getNewNode(int id, Node nxt) {
     Node ret = node[cnt++]; // 새로운 노드 생성
     ret.id = id;
     ret.nxt = nxt;
     ret.v = ++version[id]; // 버전 업데이트 
     return ret;
 }

 public class Team {
     Node[] head = new Node[6]; // 각 점수별 팀의 헤드 노드.
     Node[] tail = new Node[6]; // 각 점수별 팀의 테일 노드
 }

 public Team[] t = new Team[6]; // 팀 배열 (최대 5개 팀)

 public void init() {
	 // 1. 노드 배열 인덱스 관리 변수 초기화 
     cnt = 0;
     
     // 2. 병사 개인 별 초기화
     for (int i=0;i<200055;i++){ 
         if (node[i] == null) node[i] = new Node();
     }
     
     // 3. 팀 별 초기화
     for (int i = 1; i <= 5; i++) {
         t[i] = new Team();
         
         // 4. 팀 내 점수 별 초기화 
         for (int j = 1; j <= 5; j++) {  
             t[i].tail[j] = t[i].head[j] = getNewNode(0, null);
         }
     }
     
     
     // 5. 버전 및 팀 번호 초기화
     for (int i = 0; i <= 100000; i++) {
         version[i] = 0;
         num[i] = 0;
     }
 }

 // 병사 고용 함수 O(1) 
 public void hire(int mID, int mTeam, int mScore) { 
     Node newNode = getNewNode(mID, null); // 새로운 병사 노드 생성
     t[mTeam].tail[mScore] .nxt = newNode; // 팀의 해당 점수 리스트에 병사 추가 
     t[mTeam].tail[mScore] = newNode; // tail update
     num[mID] = mTeam; // 새로 고용된 병사의 팀 번호 저장
 }

 // 병사 해고 함수 O(1) 
 public void fire(int mID) { 
     version[mID] = -1; // 버전을 -1로 설정해 병사 정보 무효화
 }

 // 병사 정보 업데이트 함수 O(!) 
 public void updateSoldier(int mID, int mScore) { 
     hire(mID, num[mID], mScore); // 병사를 새로운 점수로 다시 고용 
 }

 // 팀의 점수 변경 함수 O(1) 
 public void updateTeam(int mTeam, int mChangeScore) { 
	 
	 if(mChangeScore<0) { // 점수 감소라면
		 // 작은 점수부터 모든 점수를 순회
		 for(int j=1; j<=5; j++) { // j : 이전 점수
			 int k = j + mChangeScore; // k : 새로운 점수 
			 k = k<1 ? 1 : (k>5? 5: k);
			 if(j==k) continue;
			 
			 // (1) 해당 점수에 해당하는 병사가 비어있다면
			 // 더미 헤드 노드의 다음이 null인지 여부로 확인 가능
			 if(t[mTeam].head[j].nxt==null) continue;
			 // (2) 그렇지 않다면 
			 // 2-1. 새로운 점수의 꼬리노드를 이전 점수의 헤드 노드로 연결
			 t[mTeam].tail[k].nxt = t[mTeam].head[j].nxt;
			 // 2.2 새로운 점수의 꼬리 노드 업데이트
			 t[mTeam].tail[k] = t[mTeam].tail[j]; 
			 // 2-3. 이전 점수의 더미 헤드 노드의 연결 노드 비우기
			 t[mTeam].head[j].nxt = null;
			 // 이전 점수의 꼬리 노드를 헤드 노드로 설정 => 점수 j 리스트를 초기화
			 t[mTeam].tail[j] = t[mTeam].head[j];
		 }
	 }
	 
	 
     if (mChangeScore > 0) { // 점수 증가인 경우
    	 // 큰 점수부터 모든 점수를 순회 
         for (int j = 5; j >= 1; j--) {
             int k = j + mChangeScore;
             k = k < 1 ? 1 : (k > 5 ? 5 : k);
             if (j == k) continue;

             if (t[mTeam].head[j].nxt == null) continue;
             t[mTeam].tail[k].nxt = t[mTeam].head[j].nxt;
             t[mTeam].tail[k] = t[mTeam].tail[j];
             t[mTeam].head[j].nxt = null;
             t[mTeam].tail[j] = t[mTeam].head[j];
         }
     }
 }

 // 최고의 병사 검색은 최대 100 회이므로 O(n) 으로 처리 가능 
 public int bestSoldier(int mTeam) {  
     for (int j = 5; j >= 1; j--) {
         Node node = t[mTeam].head[j].nxt;
         if (node == null) continue;

         int ans = 0;
         while (node != null) {
             if (node.v == version[node.id]) { // 정보 만료 여부를 꼭 확인
                 ans = ans < node.id ? node.id : ans; // 고유 번호가 큰 병사를 선택
             }
             node = node.nxt;
         }
         if (ans != 0) return ans;
     }
     return 0;
 }
}
