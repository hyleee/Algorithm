package swea;

import java.util.LinkedList;

public class 계산게임 {

    private static final int MAX_CARD = 50000; //  putCards() 함수의 호출 횟수는 10,000회 이하이므로

    private static class Table {
        public static int joker;
        public static int begin, end;
        public static int[] cards = new int[MAX_CARD * 2 +5]; // 양끝 추가, 처음 5장까지 고려
        public static LinkedList<Integer>[][] idxList = new LinkedList[20][20];
        // idxList[joker][score] := 조커의 점수가 joker일 때, 점수가 score인 인덱스 리스트

        // mJoker : 조커 카드에서 사용할 조커 값 ( 1<= <= 30)
        // mNumbers[] : 주어지는 카드에 적혀있는 수 ( 1~30 또는 -1 )
        public static void init(int mJoker, int mNumbers[]){
            joker = mJoker %20;
            begin = end = MAX_CARD; // 카드들의 처음, 끝 위치 초기화하기

            // 조커 점수 별 정답지 생성
            for(int i=0; i<20; i++){
                for(int j=0; j<20; j++){
                    idxList[i][j] = new LinkedList<>();
                }
            }

            // 처음 5장
            for(int i=0; i<5; i++){
                cards[end+i] = mNumbers[i];
            }
            end += 5;

            // 조커 점수 별 정답지에 답 기록
            for(int i=0; i<2; i++){
                updateIdx(MAX_CARD+i, 1);
            }



        }

        // idx ~ (idx+3) 의 4 장의 점수를 mdir 방향에 추가했을 때
        // mdir =0 : 왼
        // mdir =1 : 오
        public static void updateIdx(int idx, int mdir){
            int sum =0;
            int joker_cnt =0;

            for(int i=0; i<4; i++){
                if(cards[idx+i]==-1){ // 조커라면
                    joker_cnt ++;  // 개수만 카운트
                } else{ // 조커가 아니라면
                    sum += cards[idx+i]; // 즉시 sum에 추가
                }
            }

            // joker 점수가 i 일 떄
            for(int i=0; i<20; i++){
                int num = ( sum + (joker_cnt * i) ) % 20;
                if(mdir==0){ // 왼쪽
                    idxList[i][num].add(0, idx);
                } else { // 오른쪽
                    idxList[i][num].add(idx);
                }
            }
        }

        // 새로운 5장을 왼쪽에 놓기
        public static void pushFront(int[] mNumbers){
            begin -= 5; // 시작점을 현재보다 5칸 왼쪽으로 땡겨놓고

            for(int i=0; i<5; i++){
                cards[begin+i] = mNumbers[i];
            }

            int target = begin;
            for(int i=4; i>=0; i--){
                updateIdx(target+i, 0);
            }
        }
        
        // 새로운 5장을 오른쪽에 놓기
        public static void pushBack(int[] mNumbers){
            for(int i=0; i<5; i++){
                cards[end+i] = mNumbers[i];
            }

            int target = end -3;
            end += 5;
            
            for(int i=0; i<=4; i++){
                updateIdx(target+i, 1);
            }
        }
        // mNum : 찾아야하는 계산 결과 값 0 <= <=19
        // mNth : 1<= <=1000 결과값이 나와야하는 횟수
        // ret[4] : 찾은 카드에 적힌 수 (조커라면 -1)
        // 조건에 맞는 카드를 찾았으면 1, 아니면 0
        public int findNumber(int mNum, int mNth, int ret[]){
            LinkedList<Integer> list = idxList[joker][mNum];
            if(mNth > list.size()) return 0;
            int idx = list.get(mNth -1);

            for(int i=0; i<4; i++){
                ret[i] = cards[idx+i];
            }

            return 1;
        }

        // 조커 카드에서 사용할 조커 값을 mValue로 변경
        // 1 <= <= 30
        public void changeJoker(int mValue){
            joker = mValue % 20;
        }
    } // private static Class Table

    private static Table table = new Table();

    void init(int mJoker, int mNumbers[]){
        table.init(mJoker, mNumbers);
    }


    // mDir 0 : 가장 왼쪽에, 1 : 가장 오른쪽에
    public void putCards(int mDir, int mNumbers[]){
        if(mDir ==0) table.pushFront(mNumbers);
        else table.pushBack(mNumbers);
    }

    int findNumber(int mNum, int mNth, int ret[]){
        return table.findNumber(mNum, mNth, ret);
    }

    void changeJoker(int mValue){
        table.changeJoker(mValue);
    }


}
